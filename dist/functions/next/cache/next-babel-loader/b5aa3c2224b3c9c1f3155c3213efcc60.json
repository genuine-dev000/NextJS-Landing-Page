{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React, { useState } from 'react';\nimport InputField, { EyeButton } from './input.style';\n\nvar Input = function Input(_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onChange = _ref.onChange,\n      inputType = _ref.inputType,\n      isMaterial = _ref.isMaterial,\n      icon = _ref.icon,\n      iconPosition = _ref.iconPosition,\n      passwordShowHide = _ref.passwordShowHide,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"onBlur\", \"onFocus\", \"onChange\", \"inputType\", \"isMaterial\", \"icon\", \"iconPosition\", \"passwordShowHide\", \"className\"]);\n\n  // use toggle hooks\n  var _useState = useState({\n    toggle: false,\n    focus: false,\n    value: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1]; // toggle function\n\n\n  var handleToggle = function handleToggle() {\n    setState(_objectSpread({}, state, {\n      toggle: !state.toggle\n    }));\n  }; // add focus class\n\n\n  var handleOnFocus = function handleOnFocus(event) {\n    setState(_objectSpread({}, state, {\n      focus: true\n    }));\n    onFocus(event);\n  }; // remove focus class\n\n\n  var handleOnBlur = function handleOnBlur(event) {\n    setState(_objectSpread({}, state, {\n      focus: false\n    }));\n    onBlur(event);\n  }; // handle input value\n\n\n  var handleOnChange = function handleOnChange(event) {\n    setState(_objectSpread({}, state, {\n      value: event.target.value\n    }));\n    onChange(event.target.value);\n  }; // get input focus class\n\n\n  var getInputFocusClass = function getInputFocusClass() {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  }; // init variable\n\n\n  var inputElement, htmlFor; // Add all classs to an array\n\n  var addAllClasses = ['reusecore__input']; // Add is-material class\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // Add icon position class if input element has icon\n\n\n  if (icon && iconPosition) {\n    addAllClasses.push(\"icon-\".concat(iconPosition));\n  } // Add new class\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // if lable is not empty\n\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // Label position\n\n\n  var LabelPosition = isMaterial === true ? 'bottom' : 'top'; // Label field\n\n  var LabelField = label && React.createElement(\"label\", {\n    htmlFor: htmlFor\n  }, label); // Input type check\n\n  switch (inputType) {\n    case 'textarea':\n      inputElement = React.createElement(\"textarea\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus\n      }));\n      break;\n\n    case 'password':\n      inputElement = React.createElement(\"div\", {\n        className: \"field-wrapper\"\n      }, React.createElement(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: state.toggle ? 'password' : 'text',\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus\n      })), passwordShowHide && React.createElement(EyeButton, {\n        onClick: handleToggle,\n        className: state.toggle ? 'eye' : 'eye-closed'\n      }, React.createElement(\"span\", null)));\n      break;\n\n    default:\n      inputElement = React.createElement(\"div\", {\n        className: \"field-wrapper\"\n      }, React.createElement(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: inputType,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus\n      })), icon && React.createElement(\"span\", {\n        className: \"input-icon\"\n      }, icon));\n  }\n\n  return React.createElement(InputField, {\n    className: \"\".concat(addAllClasses.join(' '), \" \").concat(getInputFocusClass())\n  }, LabelPosition === 'top' && LabelField, inputElement, isMaterial && React.createElement(\"span\", {\n    className: \"highlight\"\n  }), LabelPosition === 'bottom' && LabelField);\n};\n/** Inout prop type checking. */\n\n\n/** Inout default type. */\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: function onBlur() {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {}\n};\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}
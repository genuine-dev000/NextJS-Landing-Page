{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { useToggle } from '../../hooks';\nimport SwitchStyle from './switch.style';\n\nvar Switch = function Switch(_ref) {\n  var className = _ref.className,\n      switchColor = _ref.switchColor,\n      isChecked = _ref.isChecked,\n      labelText = _ref.labelText,\n      labelPosition = _ref.labelPosition,\n      switchSize = _ref.switchSize,\n      isMaterial = _ref.isMaterial,\n      barColor = _ref.barColor,\n      onChange = _ref.onChange,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      handleOnChange = _ref.handleOnChange,\n      props = _objectWithoutProperties(_ref, [\"className\", \"switchColor\", \"isChecked\", \"labelText\", \"labelPosition\", \"switchSize\", \"isMaterial\", \"barColor\", \"onChange\", \"onFocus\", \"onBlur\", \"handleOnChange\"]);\n\n  // use toggle hooks\n  var _useToggle = useToggle(isChecked),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      toggleValue = _useToggle2[0],\n      toggleHandler = _useToggle2[1]; // Add all classs to an array\n\n\n  var addAllClasses = ['reusecore__switch']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(\"label_\".concat(labelPosition));\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  handleOnChange = function handleOnChange(event) {\n    toggleHandler();\n    onChange(!toggleValue);\n  };\n\n  var LabelField = labelText && React.createElement(\"span\", {\n    className: \"reusecore__field-label\"\n  }, labelText);\n  var position = labelPosition || 'top';\n  return React.createElement(SwitchStyle, _extends({\n    className: addAllClasses.join(' '),\n    switchColor: switchColor,\n    switchSize: switchSize,\n    barColor: barColor\n  }, props), React.createElement(\"label\", null, position === 'left' || position === 'right' || position === 'top' ? LabelField : '', React.createElement(\"input\", {\n    checked: toggleValue,\n    onChange: handleOnChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    className: \"switch\",\n    type: \"checkbox\",\n    value: toggleValue\n  }), React.createElement(\"div\", null, React.createElement(\"div\", null)), position === 'bottom' && LabelField));\n};\n\nSwitch.defaultProps = {\n  isChecked: false,\n  labelPosition: 'top',\n  onBlur: function onBlur() {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {}\n};\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}
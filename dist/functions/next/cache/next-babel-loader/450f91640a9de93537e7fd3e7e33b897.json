{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { useToggle } from '../../hooks';\nimport CheckBoxStyle from './checkbox.style';\n\nvar CheckBox = function CheckBox(_ref) {\n  var className = _ref.className,\n      isChecked = _ref.isChecked,\n      labelText = _ref.labelText,\n      value = _ref.value,\n      id = _ref.id,\n      htmlFor = _ref.htmlFor,\n      labelPosition = _ref.labelPosition,\n      isMaterial = _ref.isMaterial,\n      disabled = _ref.disabled,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isChecked\", \"labelText\", \"value\", \"id\", \"htmlFor\", \"labelPosition\", \"isMaterial\", \"disabled\"]);\n\n  // use toggle hooks\n  var _useToggle = useToggle(isChecked),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      toggleValue = _useToggle2[0],\n      toggleHandler = _useToggle2[1]; // Add all classs to an array\n\n\n  var addAllClasses = ['reusecore__checkbox']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(\"label_\".concat(labelPosition));\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // label control\n\n\n  var LabelField = labelText && React.createElement(\"span\", {\n    className: \"reusecore__field-label\"\n  }, labelText);\n  var position = labelPosition || 'right';\n  return React.createElement(CheckBoxStyle, _extends({\n    className: addAllClasses.join(' ')\n  }, props), React.createElement(\"label\", {\n    htmlFor: htmlFor\n  }, position === 'left' || position === 'right' ? LabelField : '', React.createElement(\"input\", _extends({\n    type: \"checkbox\",\n    className: \"checkbox\",\n    id: id,\n    value: value,\n    checked: toggleValue,\n    onChange: toggleHandler,\n    disabled: disabled\n  }, props)), React.createElement(\"div\", null)));\n};\n\n/** Checkbox default proptype */\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false\n};\nexport default CheckBox;","map":null,"metadata":{},"sourceType":"module"}